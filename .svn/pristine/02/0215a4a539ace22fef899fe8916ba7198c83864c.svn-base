<?php

namespace app\admin\controller;

use app\admin\model\CpCompany;
use app\admin\model\CpRecruitment;
use app\admin\model\SystemAdmin;
use app\admin\model\SystemQuick;
use app\admin\model\UserBaseinfo;
use app\admin\model\UserRegisterLog;
use app\common\controller\AdminController;
use think\App;
use think\facade\Env;

class Index extends AdminController
{

    /**
     * 后台主页
     * @return string
     * @throws \Exception
     */
    public function index()
    {
        return $this->fetch('', [
            'admin' => session('admin'),
        ]);
    }

    /**
     * 后台欢迎页
     * @return string
     * @throws \Exception
     */
    public function welcome()
    {
        $quicks = SystemQuick::field('id,title,icon,href')
            ->where(['status' => 1])
            ->order('sort', 'desc')
            ->limit(8)
            ->select();
        $data['name'] = ['会员总数','公司总数','招聘信息','每日注册'];
        $total = 29;
        for ($i = $total; $i >= 0; $i--){
            $time = strtotime('-'.$i.' days');
            $data['day'][] = date('m-d', $time);
            $data['user_count'][] = UserBaseinfo::whereTime('create_time','<=', $time)->count();
            $data['company_count'][] = CpCompany::whereTime('create_time','<=', $time)->count();
            $data['recruitment_count'][] = CpRecruitment::whereTime('create_time','<=', $time)->count();
            $data['today_register_count'][] = UserRegisterLog::whereDay('register_time','-'.$i.' days')->count();
        }
        $this->assign([
            'quicks'                =>  $quicks,
            'user_count'            =>  $data['user_count'][$total],
            'company_count'         =>  $data['company_count'][$total],
            'recruitment_count'     =>  $data['recruitment_count'][$total],
            'today_register_count'  =>  $data['today_register_count'][$total],
            'charts_data'           =>  json_encode($data),
        ]);
        return $this->fetch();
    }

    /**
     * 修改管理员信息
     * @return string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function editAdmin()
    {
        $id = session('admin.id');
        $row = (new SystemAdmin())
            ->withoutField('password')
            ->find($id);
        empty($row) && $this->error('用户信息不存在');
        if ($this->request->isAjax()) {
            $post = $this->request->post();
            $rule = [];
            $this->validate($post, $rule);
            try {
                $save = $row
                    ->allowField(['head_img', 'phone', 'remark', 'update_time'])
                    ->save($post);
            } catch (\Exception $e) {
                $this->error('保存失败');
            }
            $save ? $this->success('保存成功') : $this->error('保存失败');
        }
        $this->assign('row', $row);
        return $this->fetch();
    }

    /**
     * 修改密码
     * @return string
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function editPassword()
    {
        $id = session('admin.id');
        $row = (new SystemAdmin())
            ->withoutField('password')
            ->find($id);
        if (!$row) {
            $this->error('用户信息不存在');
        }
        if ($this->request->isAjax()) {
            $post = $this->request->post();
            $rule = [
                'password|登录密码'       => 'require',
                'password_again|确认密码' => 'require',
            ];
            $this->validate($post, $rule);
            if ($post['password'] != $post['password_again']) {
                $this->error('两次密码输入不一致');
            }

            // 判断是否为演示站点
            $example = Env::get('manage.example', 0);
            $example == 1 && $this->error('演示站点不允许修改密码');

            try {
                $save = $row->save([
                    'password' => password($post['password']),
                ]);
            } catch (\Exception $e) {
                $this->error('保存失败');
            }
            if ($save) {
                $this->success('保存成功');
            } else {
                $this->error('保存失败');
            }
        }
        $this->assign('row', $row);
        return $this->fetch();
    }

}
